syntax = "proto3";
package tika;

import "google/api/annotations.proto";

option go_package = "apache.org/tika";
option java_multiple_files = true;
option java_package = "org.apache.tika";
option java_outer_classname = "TikaProto";
option objc_class_prefix = "HLW";

// The Tika Grpc Service definition
service Tika {
  rpc SaveFetcher(SaveFetcherRequest) returns (SaveFetcherReply) {
    option (google.api.http) = {
      post: "/v1/fetcher"
      body: "*"
    };
  }
  rpc GetFetcher(GetFetcherRequest) returns (GetFetcherReply) {
    option (google.api.http) = {
      get: "/v1/fetcher/{fetcher_id}"
    };
  }
  rpc ListFetchers(ListFetchersRequest) returns (ListFetchersReply) {
    option (google.api.http) = {
      get: "/v1/fetchers"
    };
  }
  rpc DeleteFetcher(DeleteFetcherRequest) returns (DeleteFetcherReply) {
    option (google.api.http) = {
      delete: "/v1/fetcher/{fetcher_id}"
    };
  }
  rpc FetchAndParse(FetchAndParseRequest) returns (FetchAndParseReply) {
    option (google.api.http) = {
      post: "/v1/fetchAndParse"
      body: "*"
    };
  }
  rpc FetchAndParseServerSideStreaming(FetchAndParseRequest) returns (stream FetchAndParseReply) {
    option (google.api.http) = {
      post: "/v1/fetchAndParseServerSideStreaming"
      body: "*"
    };
  }
  rpc FetchAndParseBiDirectionalStreaming(stream FetchAndParseRequest) returns (stream FetchAndParseReply) {
    option (google.api.http) = {
      post: "/v1/fetchAndParseBiDirectionalStreaming"
      body: "*"
    };
  }
  rpc GetFetcherConfigJsonSchema(GetFetcherConfigJsonSchemaRequest) returns (GetFetcherConfigJsonSchemaReply) {
    option (google.api.http) = {
      get: "/v1/fetcherConfigJsonSchema/{plugin_id}"
    };
  }
  rpc SaveEmitter(SaveEmitterRequest) returns (SaveEmitterReply) {
    option (google.api.http) = {
      post: "/v1/emitter"
      body: "*"
    };
  }
  rpc GetEmitter(GetEmitterRequest) returns (GetEmitterReply) {
    option (google.api.http) = {
      get: "/v1/emitter/{emitter_id}"
    };
  }
  rpc ListEmitters(ListEmittersRequest) returns (ListEmittersReply) {
    option (google.api.http) = {
      get: "/v1/emitters"
    };
  }
  rpc DeleteEmitter(DeleteEmitterRequest) returns (DeleteEmitterReply) {
    option (google.api.http) = {
      delete: "/v1/emitter/{emitter_id}"
    };
  }
  rpc GetEmitterConfigJsonSchema(GetEmitterConfigJsonSchemaRequest) returns (GetEmitterConfigJsonSchemaReply) {
    option (google.api.http) = {
      get: "/v1/emitterConfigJsonSchema/{plugin_id}"
    };
  }
  rpc SavePipeIterator(SavePipeIteratorRequest) returns (SavePipeIteratorReply) {
    option (google.api.http) = {
      post: "/v1/pipeIterator"
      body: "*"
    };
  }
  rpc GetPipeIterator(GetPipeIteratorRequest) returns (GetPipeIteratorReply) {
    option (google.api.http) = {
      get: "/v1/pipeIterator/{pipe_iterator_id}"
    };
  }
  rpc ListPipeIterators(ListPipeIteratorsRequest) returns (ListPipeIteratorsReply) {
    option (google.api.http) = {
      get: "/v1/pipeIterators"
    };
  }
  rpc DeletePipeIterator(DeletePipeIteratorRequest) returns (DeletePipeIteratorReply) {
    option (google.api.http) = {
      delete: "/v1/pipeIterator/{pipe_iterator_id}"
    };
  }
  rpc GetPipeIteratorConfigJsonSchema(GetPipeIteratorConfigJsonSchemaRequest) returns (GetPipeIteratorConfigJsonSchemaReply) {
    option (google.api.http) = {
      get: "/v1/pipeIteratorConfigJsonSchema/{plugin_id}"
    };
  }
  rpc RunPipeJob(RunPipeJobRequest) returns (RunPipeJobReply) {
    option (google.api.http) = {
      post: "/v1/runPipeJob"
      body: "*"
    };
  }
  rpc GetPipeJob(GetPipeJobRequest) returns (GetPipeJobReply) {
    option (google.api.http) = {
      get: "/v1/pipeJob/{pipe_job_id}"
    };
  }
}

message SaveFetcherRequest {
  string fetcher_id = 1;
  string plugin_id = 2;
  string fetcher_config_json = 3;
}

message SaveFetcherReply {
  string fetcher_id = 1;
}

message FetchAndParseRequest {
  string fetcher_id = 1;
  string fetch_key = 2;
  string fetch_metadata_json = 3;
  string added_metadata_json = 4;
  string parse_context_json = 5;
}

message Value {
  oneof value {
    string string_value = 1;
    int64 int_value = 2;
    bool bool_value = 3;
    double double_value = 4;
  }
}

message ValueList {
  repeated Value values = 1;
}

message Metadata {
  map<string, ValueList> fields = 1;
}

message FetchAndParseReply {
  string fetch_key = 1;
  repeated Metadata metadata = 2;
  string status = 3;
  string error_message = 4;
}

message DeleteFetcherRequest {
  string fetcher_id = 1;
}

message DeleteFetcherReply {
  bool success = 1;
}

message GetFetcherRequest {
  string fetcher_id = 1;
}

message GetFetcherReply {
  string fetcher_id = 1;
  string plugin_id = 2;
  map<string, string> params = 3;
}

message ListFetchersRequest {
  int32 page_number = 1;
  int32 num_fetchers_per_page = 2;
}

message ListFetchersReply {
  repeated GetFetcherReply get_fetcher_replies = 1;
}

message GetFetcherConfigJsonSchemaRequest {
  string plugin_id = 1;
}

message GetFetcherConfigJsonSchemaReply {
  string fetcher_config_json_schema = 1;
}

message SaveEmitterRequest {
  string emitter_id = 1;
  string plugin_id = 2;
  string emitter_config_json = 3;
}

message SaveEmitterReply {
  string emitter_id = 1;
}

message GetEmitterRequest {
  string emitter_id = 1;
}

message GetEmitterReply {
  string emitter_id = 1;
  string plugin_id = 2;
  map<string, string> params = 3;
}

message ListEmittersRequest {
  int32 page_number = 1;
  int32 num_emitters_per_page = 2;
}

message ListEmittersReply {
  repeated GetEmitterReply get_emitter_replies = 1;
}

message DeleteEmitterRequest {
  string emitter_id = 1;
}

message DeleteEmitterReply {
  bool success = 1;
}

message GetEmitterConfigJsonSchemaRequest {
  string plugin_id = 1;
}

message GetEmitterConfigJsonSchemaReply {
  string emitter_config_json_schema = 1;
}

message SavePipeIteratorRequest {
  string pipe_iterator_id = 1;
  string plugin_id = 2;
  string pipe_iterator_config_json = 3;
}

message SavePipeIteratorReply {
  string pipe_iterator_id = 1;
}

message GetPipeIteratorRequest {
  string pipe_iterator_id = 1;
}

message GetPipeIteratorReply {
  string pipe_iterator_id = 1;
  string plugin_id = 2;
  map<string, string> params = 3;
}

message ListPipeIteratorsRequest {
  int32 page_number = 1;
  int32 num_pipe_iterators_per_page = 2;
}

message ListPipeIteratorsReply {
  repeated GetPipeIteratorReply get_pipe_iterator_replies = 1;
}

message DeletePipeIteratorRequest {
  string pipe_iterator_id = 1;
}

message DeletePipeIteratorReply {
  bool success = 1;
}

message GetPipeIteratorConfigJsonSchemaRequest {
  string plugin_id = 1;
}

message GetPipeIteratorConfigJsonSchemaReply {
  string pipe_iterator_config_json_schema = 1;
}

message RunPipeJobRequest {
  string pipe_iterator_id = 1;
  string fetcher_id = 2;
  string emitter_id = 3;
  int32 job_completion_timeout_seconds = 4;
}

message RunPipeJobReply {
  string pipe_job_id = 1;
}

message GetPipeJobRequest {
  string pipe_job_id = 1;
}

message GetPipeJobReply {
  string pipe_job_id = 1;
  string pipe_iterator_id = 2;
  string fetcher_id = 3;
  string emitter_id = 4;
  bool is_running = 5;
  bool is_completed = 6;
  bool has_error = 7;
}
