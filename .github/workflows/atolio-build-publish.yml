name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Docker image version tag'
        required: true
        type: string

env:
  PROJECT_NAME: tika-pipes
  MULTI_ARCH: true
  AWS_REGION: us-west-2
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug GitHub Context
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'maven'

      - name: Configure AWS credentials
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@v4
        env:
          ACTIONS_STEP_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false
          role-duration-seconds: 900
          output-credentials: true

      - name: Login to Amazon ECR
        if: github.event_name != 'pull_request'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build with Maven and Push Docker Image
        if: github.event_name != 'pull_request'
        env:
          MULTI_ARCH: ${{ env.MULTI_ARCH }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        run: |
          # Get short SHA for tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          # Set final tag, prioritizing manual input, then short SHA
          RELEASE_IMAGE_TAG="${{ inputs.version }}"
          if [ -z "$RELEASE_IMAGE_TAG" ]; then
            RELEASE_IMAGE_TAG="$SHORT_SHA"
          fi          
          
          export RELEASE_IMAGE_TAG="${RELEASE_IMAGE_TAG}"
          
          mvn clean package 